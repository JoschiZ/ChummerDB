@using ChummerDBRazorLibrary.Backend.xml
@using ChummerDBRazorLibrary.Backend.xml.Bonus
@inherits MvvmComponentBase<ArmorCardViewModel>
@implements ICard<Armor>

@if (ViewModel.Armor is not null)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudStack Row Justify="Justify.SpaceBetween"><MudText Typo="Typo.h6" Color="Color.Primary">@ViewModel.Armor.Name</MudText>
                    <DisplaySource SourceObject="ViewModel.Armor"></DisplaySource></MudStack>
                <MudText Color="Color.Tertiary" Typo="Typo.subtitle1">(@ViewModel.Armor.Category)</MudText>
                <MudDivider/>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <div class="split-columns">
                <PropertyDisplay Label="Armor" Value="@ViewModel.Armor.GetDisplayString()"/>
                <PropertyDisplay Label="Capacity" Value="@ViewModel.Armor.ArmorCapacity"/>
                <PropertyDisplay Label="Availability" Value="@ViewModel.Armor.Availability"/>
                <PropertyDisplay Label="Cost" Value="@ViewModel.Armor.GetCostString()"/>
                <PropertyDisplay Label="Associated Weapon" Value="@ViewModel.Armor.AddWeapon"></PropertyDisplay>
                <PropertyDisplay Label="Max. Rating" Value="@(ViewModel.Armor.Rating > 0 ? ViewModel.Armor.Rating.ToString() : string.Empty)"></PropertyDisplay>
                <PropertyDisplay Label="Additional Mod Category" Value="@ViewModel.Armor.AddModCategory"></PropertyDisplay>
                @if (ViewModel.Armor.SelectModsFromCategory.Count > 0)
                {
                    <PropertyDisplay Label="Includes a mod from" Value="@string.Join(", ", ViewModel.Armor.SelectModsFromCategory)"></PropertyDisplay>
                }
            </div>


            
            @if (ViewModel.Armor.Bonuses.Count > 0 || ViewModel.Armor.WirelessBonuses.Count > 0)
            {
                <MudDivider Light Style="padding-bottom: 5px; border-top-width: 3px"></MudDivider>
            }
            <div class="card-container">
                <BonusCard Item="ViewModel.Armor.Bonuses"></BonusCard>
                <BonusCard Title="Wireless Bonuses" Item="ViewModel.Armor.WirelessBonuses"></BonusCard>
            </div>

        </MudCardContent>
    </MudCard>
    
    <DynamicPopoverCard TItem="IEnumerable<BaseBonus>" TCard="BonusCard" Item="ViewModel.Armor.WirelessBonuses"/>
}

<style>
    .split-columns {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }
    
    .split-columns > p {
        flex: 0 1 50%;
    }
    
    .card-container {
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        flex-wrap: wrap;
    }
</style>


@code {
    [Parameter]
    public Armor? Item { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel.Armor = Item;
    }

}